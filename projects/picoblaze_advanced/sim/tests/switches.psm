;; *********************************************************************
;; $Header:$
;; $Author:$
;; $Date:$
;; $Revision:$
;; $State:$
;; *********************************************************************

;; *********************************************************************
;; Register and other definitions.  In C code this would all go in some header file
;; *********************************************************************

	CONSTANT UART_BAUD_CONTROL,      00
	CONSTANT UART_BAUD_COUNT,        01
	CONSTANT UART_BAUD_STATUS,       02
	CONSTANT UART_TX_DATA,           03
	CONSTANT UART_TX_CONTROL,        04
	CONSTANT UART_FIFO_STATUS,       05
	CONSTANT UART_RX_DATA,           06

	CONSTANT LEDS ,                  08
	CONSTANT SWITCHES_GPIO_ENABLE,   09	
	CONSTANT SWITCHES_GPIO_DATA_O,   0A
	
	CONSTANT INT_MASK,               1B
	CONSTANT INT_STATUS,             1C
	CONSTANT INT_CLEAR,              1D

	CONSTANT SIM_STATUS,             FF
	
	;; Address of variables in Scratch Memory
	constant send_char,           00
	
	;; Named registers
	namereg sC, uart_tx_reg
	namereg sD, uart_rx_reg
	namereg sE, interrupt_byte
	namereg sF, task_byte

;; *********************************************************************
;; Start is the beginning of the program, at POR we come here.
;; *********************************************************************
	
Start:
	load s0, 01
	output s0, SIM_STATUS

	;; 
	;; POR Value testing
	;; 
	input s1, SWITCHES_GPIO_ENABLE
	compare s1, FF
	jump NZ, SIM_FAIL	

	input s1, SWITCHES_GPIO_DATA_O
	compare s1, 00
	jump NZ, SIM_FAIL	

	;;
	;; Check each bit for a rising and falling interrupt
	;;
	load interrupt_byte, 00

	load s0, FB
	output s0, INT_MASK  
	
	load s0, 01
	output s0, SWITCHES_GPIO_ENABLE
	
	load s0, 03
	output s0, SIM_STATUS
BIT_0R:		
	compare interrupt_byte, 01
	jump NZ, BIT_0R

	load interrupt_byte, 00

	
	load s0, 01
	output s0, SIM_STATUS

BIT_0F:	
	compare interrupt_byte, 01
	jump NZ, BIT_0R
			
	
	jump SIM_PASS

;;; ****************************************************************************
;;; Interrupt Initialization -- Enable the interrupts
;;; ****************************************************************************
INT_init:
	;; Turn on interrupts
	ENABLE INTERRUPT
	
	return	

;;; ****************************************************************************
;;; SIM_PASS:	called when a simulation has passed, let the test bench know this
;;;		through the SIM_STATUS register and sit here forever!
;;; ****************************************************************************	
SIM_PASS:
	load s0, 40
	output s0, SIM_STATUS
	jump Z, SIM_PASS

;;; ****************************************************************************
;;; SIM_FAIL:	called when a simulation has failed, let the test bench know this
;;;		through the SIM_STATUS register and sit here forever!
;;; ****************************************************************************
SIM_FAIL:
	load s0, 80
	output s0, SIM_STATUS
	jump Z, SIM_FAIL
		
	
;; *********************************************************************
;; ISR is the real Interrupt Service Routine.  When the interrupt line
;; goes high we come here
;; *********************************************************************		
ISR:
	input s0, INT_STATUS
	output s0, INT_CLEAR

	input interrupt_byte, SWITCHES_GPIO_DATA_O		
	returni ENABLE	
			
	ADDRESS 3FF
	jump ISR		